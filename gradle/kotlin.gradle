/*
 * Check usage information at: http://hexagonkt.com/gradle/#kotlin
 */

apply(plugin: "idea")
apply(plugin: "eclipse")
apply(plugin: "kotlin")
apply(plugin: "jacoco")
apply(plugin: "maven-publish")

defaultTasks("build")

java {
    sourceCompatibility = JavaVersion.toVersion(findProperty("jvmTarget") ?: "11")
    targetCompatibility = sourceCompatibility
}

idea {
    module {
        setDownloadSources(true)
        setDownloadJavadoc(true)
    }
}

eclipse {
    classpath {
        setDownloadSources(true)
        setDownloadJavadoc(true)
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    final String scriptMockkVersion = findProperty("mockkVersion") ?: "1.12.4"
    final String scriptJunitVersion = findProperty("junitVersion") ?: "5.9.0"

    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation("org.junit.jupiter:junit-jupiter:$scriptJunitVersion")
    testImplementation("io.mockk:mockk:$scriptMockkVersion") {
        exclude(group: "org.jetbrains.kotlin")
    }
}

// Replace build variables in resource files
processResources {
    [ "properties", "ini", "cfg", "txt", "html", "xml", "json", "yaml", "svg" ].each { String ext ->
        final Map<String, ?> stringProperties = project.getProperties()
            .findAll { it.value instanceof String }

        filesMatching("**/*.$ext") {
            filter {
                String content = it

                stringProperties.entrySet().forEach { entry ->
                    content = content.replace("\${project.${entry.key}}", entry.value.toString())
                }

                content
            }
        }
    }
}

jar {
    manifest {
        attributes("Automatic-Module-Name": "${project.group}.${project.name.replace('_', '.')}")
    }
}

tasks.compileJava.doFirst {
    options.compilerArgs = [ "--module-path", classpath.asPath ]
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

sourceSets.main.java.srcDirs = sourceSets.main.kotlin.srcDirs
tasks.compileJava.destinationDirectory.set(tasks.compileKotlin.destinationDirectory)

tasks.compileKotlin.kotlinOptions.jvmTarget = targetCompatibility
tasks.compileKotlin.kotlinOptions.apiVersion = "1.7"

tasks.compileTestKotlin.kotlinOptions.jvmTarget = tasks.compileKotlin.kotlinOptions.jvmTarget
tasks.compileTestKotlin.kotlinOptions.apiVersion = tasks.compileKotlin.kotlinOptions.apiVersion

clean {
    delete("build", "log", "out", ".vertx", "file-uploads")

    delete(
        fileTree(rootDir) { include("**/*.log") },
        fileTree(rootDir) { include("**/*.hprof") },
        fileTree(rootDir) { include("**/*.build_artifacts.txt") },
        fileTree(rootDir) { include("**/.attach_pid*") },
        fileTree(rootDir) { include("**/hs_err_pid*") }
    )
}

test {
    exclude("**/*IT.*")
}

tasks.register("verify", Test) {
    group = "verification"
    description = "Runs integration tests."

    shouldRunAfter(test)
    include("**/*IT.*")
}

check.dependsOn("test", "verify")

// Show useful testing information while running tests
tasks.withType(Test) { testTask ->
    testTask.useJUnitPlatform()
    testTask.systemProperties(project.getProperties().findAll { it.value instanceof String })
    testTask.systemProperty("file.encoding", "utf-8")

    testTask.testLogging {
        if (logger.isInfoEnabled())
            events("skipped", "failed", "standardOut", "standardError")
        else
            events("skipped", "failed")
    }
}

jacoco {
    toolVersion = "0.8.8"
}

tasks.jacocoTestReport {
    dependsOn("check", "jacocoReportSources")

    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

build.dependsOn(tasks.jacocoTestReport)

task("jacocoReportSources") {
    group = "verification"
    description = "Add base directory to Kotlin sources (fix report for Kotlin coding standard)."

    doLast {
        final String basePackage = findProperty("basePackage")
        if (basePackage != null) {
            final String basePackageDirectory = basePackage.tr(".", "/")
            final String relativePackageDirectory = "build/jacoco/src/$basePackageDirectory"
            file(relativePackageDirectory).mkdirs()

            copy {
                from(project.sourceSets.main.allSource)
                into(relativePackageDirectory)
            }
        }
    }
}

tasks.register("sourcesJar", Jar) {
    group = "distribution"
    description = "Create a jar file with the source code files."

    archiveClassifier.set("sources")
    from(project.sourceSets.main.allSource)
}

tasks.register("testJar", Jar) {
    group = "distribution"
    description = "Create a jar file with the test classes."
    dependsOn(testClasses)

    archiveClassifier.set("test")
    from(project.sourceSets.test.output.classesDirs)
}

tasks.withType(Zip).each { zipTask ->
    zipTask.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            artifact(sourcesJar) // To publish in Maven Central, the package need to include sources
        }
    }
}
