/*
 * Check usage information at: http://hexagonkt.com/gradle/#application
 */

apply(plugin: "application")

classes.dependsOn("buildInfo")

application {
    mainClass = findProperty("applicationClass")
}

task("buildInfo") {
    group = "build"
    description =
        "Add configuration file (`META-INF/build.properties`) with build variables to the package."

    doLast {
        file("$buildDir/resources/main/META-INF").mkdirs()
        file("$buildDir/resources/main/META-INF/build.properties").write("""
        project=$rootProject.name
        module=$project.name
        version=${project.version.toString()}
        group=$project.group
        description=$project.description
    """.stripIndent ())
    }
}

tasks.register("jarAll", Jar) {
    group = "distribution"
    description = "Create a JAR with all dependencies, and the application main class set up."
    dependsOn("jar")

    archiveBaseName.set("${archiveBaseName.orNull}-all")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude("META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA")
    }
    with(jar)

    doFirst {
        manifest {
            attributes("Main-Class": application.mainClass)
        }
    }
}

tasks.register("jre", Exec) {
    group = "distribution"
    description = "Create an application distribution based on a jlink generated JRE."
    dependsOn("jarAll")

    final String projectName = project.name
    final String jarFileName = "${project.name}-all-${project.version}.jar"
    final String modules = findProperty("modules") ?: "java.logging,java.management"

    commandLine(
        [
            "jlink",
            "--add-modules",
            modules,
            "--compress=2",
            "--strip-debug",
            "--no-header-files",
            "--no-man-pages",
            "--output",
            "$buildDir/$projectName",
        ]
    )

    doLast {
        copy {
            from("$buildDir/libs")
            include(jarFileName)
            into("$buildDir/$projectName/lib")
        }

        final File launcher = file("$buildDir/$projectName/bin/$projectName")
        launcher.write("""\
            #!/usr/bin/env sh
            set -e
            appRoot="\$(dirname \$0)"
            "\$appRoot/java" -jar "\$appRoot/../lib/$jarFileName"
        """.stripIndent())
        launcher.setExecutable(true)
    }
}

tasks.register("watch") {
    group = "application"
    description = "Run application in other thread. Allows the possibility to watch source changes."
    dependsOn("classes")

    doLast {
        final JavaExec runTask = run

        // NOTE: these two statements are *REQUIRED* to load classpath and main class
        runTask.classpath.each { it.toString() }
        runTask.mainClass.toString()

        ByteArrayOutputStream out = new ByteArrayOutputStream()
        exec {
            commandLine("jps", "-l")
            standardOutput = out
        }
        out.toString().readLines()
            .findAll { it.endsWith(runTask.mainClass.get()) }
            .collect { it.split(" ")[0] }
            .each { pid -> exec { commandLine("kill", pid) } }

        Thread.startDaemon {
            runTask.setIgnoreExitValue(true)
            runTask.actions.each { action -> action.execute(runTask) }
        }
    }
}
